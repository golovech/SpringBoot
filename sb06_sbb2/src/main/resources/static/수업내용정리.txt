[수업내용정리]
sb06_sbb2

1. controller.MainController.java 추가
   /index => /index.html
   
   
2. 이제 jpa를 사용하도록 설정해보자~

지금까지는 쿼리를 작성하여 사용했지만, 이제 필요가 없어진다!

insert into question (id, subject, content) values (1, '안녕하세요', '가입 인사드립니다 ^^');
insert into question (id, subject, content) values (2, '질문 있습니다', 'ORM이 궁금합니다');


[ORM] 엔티티 사용 -> 자동으로 DB와 연동 -> 쿼리 만들 필요가 없음!
	Question 엔티티 클래스

	Question q1 = new Question();
	q1.setSubject("안녕하세요");
	q1.setContent("가입인사 ^^");
	this.question.save(q1);
	
	
3. H2 데이터베이스 설치하여 사용해보자.
   - 개발용으로 사용
   - 자바 기반의 가벼운 DBMS
   - 빠르게 개발 -> 내가 원하는, 운영하는 DBMS에 올리면 된다. (Oracle, mySQL등...)
   - qulld.gradle 파일에 모듈 추가
   
   
4. 설치한 H2 데이터베이스를 사용하기 위한 설정 해보자~ 
   - application.properties 에서 설정.

	spring.h2.console.enabled=ture
	- h2콘솔에 접속
	- 웹 UI
	
	spring.h2.console.path=/h2-console
	- h2 콘솔 접속 경로 지정. (툴)
	  ~ 사용자의 홈 디렉토리 내에  local.mv.db 데이터베이스 파일 생성
	
	spring.datasource.url=jdbc:h2:~/local
	- 데이터베이스에 접속 경로 url (DB. c - user - 나의 디렉토리.. 나중에는 직접 만들면 됨)
	
	spring.datasource.driverClassName=org.h2.Driver
	- 드라이버 클래스명
	
	spring.datasource.username=sa
	- 계정
	
	spring.datasource.password=
	- 비밀번호
	
	
5. JPA 환경설정
	h2 데이터베이스 설치 + 파일 생성
	프로그램에서 jpa 사용하기 위한 환경설정 해보자!
	
	* build.gradle 에 추가.
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa' 

    // JPA 사용 . implementation - 필요한 라이브러리 설치를 위한, 일반적인 옵션
    //							   이 라이브러리와 관련된 모든 모듈을 컴파일 하지 않고,
    //							   변경된 내용과 관련된 모듈만 컴파일 한다는 뜻.
    //							   프로젝트의 빌딩하는 속도가 빠르다.


	* application.properties 에 추가
	spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
	  ㄴ 자동변환코딩
	spring.jpa.hibernate.ddl-auto=update
	
	spring.jpa.properties.hibernate.format_sql=true 
	spring.jpa.properties.hibernate.show_sql=true   
	  ㄴ  디버깅용도
	

6. 테이블 생성
------------------------------------------
   질문 테이블(Question)
------------------------------------------
	속성 이름   설명
	id   질문 데이터의 고유 번호
	subject   질문 데이터의 제목
	content   질문 데이터의 내용
	createDate   질문 데이터를 작성한 일시
	
	=>
	
	Hibernate: 
	create table question 
	(
		id integer generated by default as identity, 
		content TEXT, create_date timestamp(6), 
		subject varchar(200), primary key (id)
	)
	
------------------------------------------
   답변 테이블(Answer)
------------------------------------------
   id   답변 데이터의 고유 번호
	question   질문 데이터 (어떤 질문의 답변인지 알아야 하므로 이 속성이 필요하다.)
	content   답변 데이터의 내용
	createDate   답변 데이터를 작성한 일시


7. 질문 엔티티, 답변 엔티티 생성하여 디비 만들면 됨.
	question 패키지
	answer 패키지
	
	
8. CRUD Repository(==DAO)
   - 이미 만들어진 쿼리로 처리하면 됨.
   
9. Junit 설치(Test용도)
  * 단위테스트 시에는 서버 정지 시키고, test 메서드 우클릭하여 실행!! *
	
	* build.gradle에 추가
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
------------------------------------------------------------   

- save()   : insert 대신 사용한다!
Hibernate: 
    insert 
    into
        question
        (content, create_date, subject, id) 
    values
        (?, ?, ?, default)
Hibernate: 
    insert 
    into
        question
        (content, create_date, subject, id) 
    values
        (?, ?, ?, default)
   
--------------------------------------------------------   
   
- findAll()   : 모든걸 찾는다!
Hibernate: 
    select
        q1_0.id,
        q1_0.content,
        q1_0.create_date,
        q1_0.subject 
    from
        question q1_0
> 2

-------------------------------------------------------

- findById()  : id로 찾는다!
Hibernate: 
    select
        q1_0.id,
        q1_0.content,
        q1_0.create_date,
        q1_0.subject 
    from
        question q1_0 
    where
        q1_0.id=?
sbb가 뭔가요?:엥?점심뭐먹을까요?   
   
---------------------------------------------

- 제목으로 검색
		// Repository
		// CrudRepository
		// PagingAndSortRepository
		// RpaRepository
		
 -------------------------------
 
 - List<Question> findBySubjectContaining(String subject);
 - List<Question> list = this.questionRepository.findBySubjectContaining("sb"); // 검색어 넣기.
		System.out.println(">>" + list.size());
 
 Hibernate: 
    select
        q1_0.id,
        q1_0.content,
        q1_0.create_date,
        q1_0.subject 
    from
        question q1_0 
    where
        q1_0.subject like ? escape '\'
>>2  
   
   *** 쿼리 메서드 참고 
   https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html
   
--------------------------------

* 질문 삭제

Hibernate: 
    select
        count(*) 
    from
        question q1_0
> 총 질문 수 : 2

Hibernate: 
    select
        q1_0.id,
        q1_0.content,
        q1_0.create_date,
        q1_0.subject 
    from
        question q1_0 
    where
        q1_0.id=?
Hibernate: 
    select
        q1_0.id,
        q1_0.content,
        q1_0.create_date,
        q1_0.subject 
    from
        question q1_0 
    where
        q1_0.id=?
Hibernate: 
    select
        al1_0.question_id,
        al1_0.id,
        al1_0.content,
        al1_0.create_date 
    from
        answer al1_0 
    where
        al1_0.question_id=?
Hibernate: 
    delete 
    from
        question 
    where
        id=?
Hibernate: 
    select
        count(*) 
    from
        question q1_0
        
> 삭제 후 총 질문 수 : 1

--------------------------------------

- 답변 insert(save)

Hibernate: 
    select
        q1_0.id,
        q1_0.content,
        q1_0.create_date,
        q1_0.subject 
    from
        question q1_0 
    where
        q1_0.id=?
Hibernate: 
    insert 
    into
        answer
        (content, create_date, question_id, id) 
    values
        (?, ?, ?, default)  id는 자동증가되니깐 디폴트임
        
        
   
   
   
   
   
   
   
